{"ast":null,"code":"import _asyncToGenerator from\"/command-center/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/command-center/node_modules/@babel/runtime/regenerator/index.js\";import{axios}from\"./api\";function useBedsSituation(){function getBedsSituation(){return _getBedsSituation.apply(this,arguments);}function _getBedsSituation(){_getBedsSituation=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var responseSituations,jsonSituations,situations;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return axios.get(\"beds_situation?quantitative=true\");case 3:responseSituations=_context.sent;jsonSituations=responseSituations.data.beds_situation;situations=[{title:\"Leitos Vagos\",value:0,color:\"text-white\",tooltip:\"Este card mostra o quantitativo de leitos vagos, ou seja, que estão liberados para receber pacientes\"},{title:\"Reservados\",value:0,color:\"text-indigo-450\",tooltip:\"Este card mostra o quantitativo de leitos que foram reservados para internar os pacientes mediante a pré-internação\"},{title:\"Alta Médica\",value:0,color:\"text-gray-400\",tooltip:\"Este card mostra os quantitativos de pacientes que receberam alta medica após as 00:00 do dia vigente\"},{title:\"Alta Hospitalar\",value:0,color:\"text-yellow-400\",tooltip:\"Este card mostra os quantitativos de pacientes que receberam alta hospitalar após terem recebido a alta médica\"},{title:\"Higienização\",value:0,color:\"text-blue-500\",tooltip:\"Este card mostra os quantitativos de leitos que foram higienizados\"},{title:\"Manutenção\",value:0,color:\"text-green-500\",tooltip:\"Este card mostra os quantitativos de leitos que estão em Interditado/Bloqueado/Manutenção\"},{title:\"Interditado Temp.\",value:0,color:\"text-brown-450\",tooltip:\"Este card mostra os quantitativos de leitos que estão em interditados temporariamente\"}];jsonSituations.forEach(function(_ref){var name=_ref.name,qtde=_ref.qtde;if(name===\"VAGO\"){situations[0].value=qtde;}else if(name===\"RESERVADO\"){situations[1].value=qtde;}else if(name===\"ALTA MEDICA\"){situations[2].value=qtde;}else if(name===\"ALTA HOSPITALAR\"){situations[3].value=qtde;}else if(name===\"HIGIENIZACAO\"){situations[4].value=qtde;}else if(name===\"MANUTENCAO\"){situations[5].value=qtde;}else if(name===\"INTERD. TEMP.\"){situations[6].value=qtde;}});return _context.abrupt(\"return\",{formatedSituations:situations,situations:jsonSituations});case 10:_context.prev=10;_context.t0=_context[\"catch\"](0);throw new Error(_context.t0.message);case 13:case\"end\":return _context.stop();}}},_callee,null,[[0,10]]);}));return _getBedsSituation.apply(this,arguments);}function getQuantitativeSituations(){return _getQuantitativeSituations.apply(this,arguments);}function _getQuantitativeSituations(){_getQuantitativeSituations=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var response,json;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return axios.get(\"quantitative_situations\");case 3:response=_context2.sent;json=response.data.quantitative_situations;return _context2.abrupt(\"return\",{situations:json});case 8:_context2.prev=8;_context2.t0=_context2[\"catch\"](0);throw new Error(_context2.t0.message);case 11:case\"end\":return _context2.stop();}}},_callee2,null,[[0,8]]);}));return _getQuantitativeSituations.apply(this,arguments);}return{getBedsSituation:getBedsSituation,getQuantitativeSituations:getQuantitativeSituations};}export default useBedsSituation;","map":{"version":3,"sources":["/command-center/src/service/useBedsSituation.js"],"names":["axios","useBedsSituation","getBedsSituation","get","responseSituations","jsonSituations","data","beds_situation","situations","title","value","color","tooltip","forEach","name","qtde","formatedSituations","Error","message","getQuantitativeSituations","response","json","quantitative_situations"],"mappings":"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","sourcesContent":["import { axios } from \"./api\";\r\n\r\nfunction useBedsSituation() {\r\n  async function getBedsSituation() {\r\n    try {\r\n      const responseSituations = await axios.get(\r\n        `beds_situation?quantitative=true`\r\n      );\r\n      const jsonSituations = responseSituations.data.beds_situation;\r\n\r\n      const situations = [\r\n        {\r\n          title: \"Leitos Vagos\",\r\n          value: 0,\r\n          color: \"text-white\",\r\n          tooltip: \"Este card mostra o quantitativo de leitos vagos, ou seja, que estão liberados para receber pacientes\"\r\n        }, {\r\n          title: \"Reservados\",\r\n          value: 0,\r\n          color: \"text-indigo-450\",\r\n          tooltip: \"Este card mostra o quantitativo de leitos que foram reservados para internar os pacientes mediante a pré-internação\"\r\n        }, {\r\n          title: \"Alta Médica\",\r\n          value: 0,\r\n          color: \"text-gray-400\",\r\n          tooltip: \"Este card mostra os quantitativos de pacientes que receberam alta medica após as 00:00 do dia vigente\"\r\n        }, {\r\n          title: \"Alta Hospitalar\",\r\n          value: 0,\r\n          color: \"text-yellow-400\",\r\n          tooltip: \"Este card mostra os quantitativos de pacientes que receberam alta hospitalar após terem recebido a alta médica\"\r\n        }, {\r\n          title: \"Higienização\",\r\n          value: 0,\r\n          color: \"text-blue-500\",\r\n          tooltip: \"Este card mostra os quantitativos de leitos que foram higienizados\"\r\n        }, {\r\n          title: \"Manutenção\",\r\n          value: 0,\r\n          color: \"text-green-500\",\r\n          tooltip: \"Este card mostra os quantitativos de leitos que estão em Interditado/Bloqueado/Manutenção\"\r\n        }, {\r\n          title: \"Interditado Temp.\",\r\n          value: 0,\r\n          color: \"text-brown-450\",\r\n          tooltip: \"Este card mostra os quantitativos de leitos que estão em interditados temporariamente\"\r\n        }\r\n      ];\r\n\r\n      jsonSituations.forEach(({ name, qtde }) => {\r\n        if (name === \"VAGO\") {\r\n          situations[0].value = qtde;\r\n        } else if (name === \"RESERVADO\") {\r\n          situations[1].value = qtde;\r\n        } else if (name === \"ALTA MEDICA\") {\r\n          situations[2].value = qtde;\r\n        } else if (name === \"ALTA HOSPITALAR\") {\r\n          situations[3].value = qtde;\r\n        } else if (name === \"HIGIENIZACAO\") {\r\n          situations[4].value = qtde;\r\n        } else if (name === \"MANUTENCAO\") {\r\n          situations[5].value = qtde;\r\n        } else if (name === \"INTERD. TEMP.\") {\r\n          situations[6].value = qtde;\r\n        }\r\n      });\r\n\r\n      return {\r\n        formatedSituations: situations,\r\n        situations: jsonSituations,\r\n      };\r\n    } catch (error) {\r\n      throw new Error(error.message);\r\n    }\r\n  }\r\n\r\n  async function getQuantitativeSituations() {\r\n    try {\r\n      const response = await axios.get(\"quantitative_situations\");\r\n      const json = response.data.quantitative_situations;\r\n\r\n      return {\r\n        situations: json,\r\n      };\r\n    } catch (error) {\r\n      throw new Error(error.message);\r\n    }\r\n  }\r\n\r\n  return {\r\n    getBedsSituation,\r\n    getQuantitativeSituations\r\n  };\r\n}\r\n\r\nexport default useBedsSituation;\r\n"]},"metadata":{},"sourceType":"module"}